package com.example.madcamp_week01

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

import android.app.Activity
import android.content.Intent
import android.os.Bundle
import android.provider.MediaStore
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentTransaction
import com.example.madcamp_week01.databinding.AddcontactBinding
import de.hdodenhof.circleimageview.CircleImageView

class AddContactFragment : Fragment() {
    private lateinit var binding: AddcontactBinding
    private var selectedImageUri: String? = null
    val TAG = "ListActivity"
    var db : AppDatabase? = null
    var contactsList = mutableListOf<Contacts>()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        binding = AddcontactBinding.inflate(inflater, container, false)

        binding.completebutton.setOnClickListener {
            createContactAndNavigateBack()
            navigateToMyAddressFragment()
        }
        return binding.root
    }

    private fun createContactAndNavigateBack() {
        val savedContacts = db?.contactsDao()?.getAll() ?: emptyList()
        contactsList.addAll(savedContacts)
        val name = binding.editname.text.toString()
        val phoneNumber = binding.editnumber.text.toString()

        if (name.isNotEmpty() && phoneNumber.isNotEmpty()) {
            // Create a Contacts object with the provided data
            val contact = Contacts(
                id = 0, // Auto-generated by Room
                image = "Blank Image",
                name = name,
                tel = phoneNumber
            )

            db?.contactsDao()?.insertAll(contact)
            contactsList.add(contact)
        } else {
            // Handle validation error (e.g., show a message)
        }
    }
    private fun navigateToMyAddressFragment() {
        // Navigate to the "my_address" fragment
        val myAddressFragment = MyAddress()

        val fragmentTransaction: FragmentTransaction = requireActivity().supportFragmentManager.beginTransaction()
        fragmentTransaction.replace(R.id.addcontactpage, myAddressFragment)
        fragmentTransaction.addToBackStack(null)
        fragmentTransaction.commit()
    }

    companion object {
        private const val PICK_IMAGE_REQUEST = 1
    }
}
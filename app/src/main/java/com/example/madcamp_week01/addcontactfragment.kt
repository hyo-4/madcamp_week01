package com.example.madcamp_week01

import android.content.Intent
import android.net.Uri
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

import android.os.Bundle
import android.provider.MediaStore
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.Spinner
import androidx.activity.addCallback
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentTransaction
import com.example.madcamp_week01.databinding.AddcontactBinding
import kotlinx.coroutines.CoroutineScope

class AddContactFragment : Fragment() {
    private lateinit var binding: AddcontactBinding
    lateinit var getPhoto : ActivityResultLauncher<String>
    var db : AppDatabase? = null
    var contactsList = mutableListOf<Contacts>()
    var inputimage : Uri? = null
    var selectedOption : String? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        binding = AddcontactBinding.inflate(inflater, container, false)
        db = AppDatabase.getInstance(requireContext())


        getPhoto =
            registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->
                uri?.let {
//                    requireActivity().contentResolver.takePersistableUriPermission(
//                        it,
//                        Intent.FLAG_GRANT_READ_URI_PERMISSION
//                    )
                    inputimage = it
                    binding.addimagebutton.setImageURI(it)
                }
            }
        Log.d("not selected", "$selectedOption")

        binding.spinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(
                parent: AdapterView<*>,
                view: View?,
                position: Int,
                id: Long
            ) {
                selectedOption = parent.getItemAtPosition(position) as String
                // Update the data based on selected option and refresh the RecyclerView
                Log.d("selected", "$selectedOption")
            }

            override fun onNothingSelected(parent: AdapterView<*>) {
                // Optional: Do something when nothing is selected
            }
        }

        binding.addphotobutton.setOnClickListener {
            openImagePicker()
        }
        binding.completebutton.setOnClickListener {
            CoroutineScope(Dispatchers.IO).launch{
                createContactAndNavigateBack(inputimage)
                navigateToMyAddressFragment()
            }
        }

        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        requireActivity().onBackPressedDispatcher.addCallback(viewLifecycleOwner) {
            navigateToMyAddressFragment()
        }
    }

    private fun openImagePicker() {
        getPhoto.launch("image/*")
    }

    private fun createContactAndNavigateBack(img:Uri?) {
        val savedContacts = db?.contactsDao()?.getAll() ?: emptyList()
        contactsList.addAll(savedContacts)
        val name = binding.editname.text.toString()
        val receivedTag = selectedOption!!
        val phoneNumber = binding.editnumber.text.toString()

        Log.d("photo", "photo: $img")
        Log.d("drawable", "photo: ${R.drawable.blankcontact}")

        if ((selectedOption != null) && name.isNotEmpty() && phoneNumber.isNotEmpty()) {
            // Create a Contacts object with the provided data
            val contact = Contacts(
                id = 0, // Auto-generated by Room
                image = img,
                name = name,
                tag = receivedTag,
                tel = phoneNumber
            )

            db?.contactsDao()?.insertAll(contact)
            contactsList.add(contact)
        } else {
            // Handle validation error (e.g., show a message)
        }
    }
    private fun navigateToMyAddressFragment() {
        // Navigate to the "my_address" fragment
        val myAddressFragment = MyAddress()

        val fragmentTransaction: FragmentTransaction = requireActivity().supportFragmentManager.beginTransaction()
        fragmentTransaction.add(R.id.addcontactpage, myAddressFragment)
        fragmentTransaction.addToBackStack(null)
        fragmentTransaction.commit()
    }

    companion object {
        private const val PICK_IMAGE_REQUEST = 1
    }
}